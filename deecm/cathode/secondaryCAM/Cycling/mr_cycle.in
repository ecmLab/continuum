###### DFE Method to compute Particle distribution under pressure #######
### Define Variables

variable  sxy    equal 10    
variable  sz     equal 10

### Define Variables for expansion/contraction
variable  Texp   equal 0.1  # %Total expansion *100     
variable  grwRt  equal 2000  # Number of steps to reach the total expansion 
variable  grwFq  equal 2000 # Number of runs to reach one step
variable  grwFi  equal ${grwRt}*${grwFq}
variable  cycles equal 2    # Number of Cycles of expansion/contraction

### Environment Setup
atom_style	  granular
atom_modify	  map array
boundary	  f f f	#periodic in z
newton		  off
communicate	  single vel yes
units		  micro
neighbor      0.02 bin         # 0.2 micron extra distance beyond force cutoff
neigh_modify  delay 0

### Geometry Definition
read_restart    cohesion.restart

#--------------------------Material Information---------------------------------------------------------
variable        cf_pp         equal     0.1
variable        cf_pw         equal     0.1
variable        cf_ww         equal     0.1
variable        cof_pp        equal     0.1
variable        cof_pw        equal     0.1
variable        cof_ww        equal     0.1
variable        corf_pp       equal     0.1
variable        corf_pw       equal     0.1
variable        corf_ww       equal     0.1
variable        Yp            equal     1.775e6
variable        Yw            equal     5.1e+6
variable        dt            equal     1e-5

#---------------------Assign Material Properties to particle and wall----------------------------------------
fix 		m1 all property/global youngsModulus peratomtype ${Yp} ${Yw} ${Yw}
fix 		m2 all property/global poissonsRatio peratomtype 0.3 0.3 0.3 
fix 		m3 all property/global coefficientRestitution peratomtypepair 3 ${cf_pp} ${cf_pw} ${cf_pw} ${cf_ww} ${cf_pw} ${cf_pw} ${cf_ww} ${cf_pw} ${cf_pw} 
fix     m4 all property/global coefficientFriction peratomtypepair 3 ${cof_pp} ${cof_pw} ${cof_pw} ${cof_ww} ${cof_pw} ${cof_pw} ${cof_ww} ${cof_pw} ${cof_pw}
fix     m5 all property/global coefficientRollingFriction peratomtypepair 3 ${corf_pp} ${corf_pw} ${corf_pw} ${corf_ww} ${corf_pw} ${corf_pw} ${corf_ww} ${corf_pw} ${corf_pw}
fix     m6 all property/global cohesionEnergyDensity peratomtypepair 3 150000 0 0 0 0 0 0 0 0

#Define pair style
pair_style gran model hertz tangential history cohesion sjkr #Hertzian with cohesion
pair_coeff	* *


timestep	${dt}
group walls type 3
group ncm type 1

fix Bsphere all mesh/surface file sphere.stl type 2 scale 0.25
fix wall all wall/gran model hertz tangential history rolling_friction epsd2 mesh n_meshes 1 meshes Bsphere

#fix     zwalls1  all wall/gran model hertz tangential history primitive type 2 zplane -${sz}
#fix     zwalls2  all wall/gran model hertz tangential history primitive type 2 zplane ${sz}
#fix     xwalls1  all wall/gran model hertz tangential history primitive type 2 xplane -${sxy}
#fix     xwalls2  all wall/gran model hertz tangential history primitive type 2 xplane ${sxy}
#fix     ywalls1  all wall/gran model hertz tangential history primitive type 2 yplane -${sxy}
#fix     ywalls2  all wall/gran model hertz tangential history primitive type 2 yplane ${sxy}

### Calculation setup
## NVE emsemble with gravity
fix 1 all nve/sphere                             # NVE ensemble for Granular system

### OUTPUT results to Screen
compute        ker   all   erotate/sphere                  # Compute the rotational kinetic energy of all particles
# Print info to screen, include step, total atom number, kinetic nergy, compute_1(Rotational energy), volume
thermo_style    custom step atoms ke
thermo          1000                              # Print thermodynamics every 500 stimesteps
thermo_modify   lost ignore norm no
compute_modify  thermo_temp dynamic yes

run 1
delete_atoms group walls

run     1000000
unfix   wall

dump	dmp all custom 100000 post4/dump*.liggghts id type x y z vx vy vz fx fy fz omegax omegay omegaz radius mass

variable    nt equal 1
variable	Rgrowrate equal 1+${Texp}/${grwRt}
compute 	rad ncm property/atom radius
variable	dgrown atom ${Rgrowrate}*2.*c_rad
variable	Rdgrowrate equal 1-${Texp}/${grwRt}
compute 	rad1 ncm property/atom radius
variable	ddgrown atom ${Rdgrowrate}*2.*c_rad

label loop1
    fix		    grow ncm adapt ${grwFq} atom diameter v_dgrown
    run		    ${grwFi}
    unfix	    grow
    fix		    dgrow ncm adapt ${grwFq} atom diameter v_ddgrown
    run         ${grwFi}
    unfix       dgrow
    variable    nt equal ${nt}+1
    if "${nt} > ${cycles}" then "jump mr_cycle.in loop2"
jump mr_cycle.in loop1

label loop2

write_restart   cycle.restart
